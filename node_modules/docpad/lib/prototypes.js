// Generated by CoffeeScript 1.3.3
(function() {
  var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9;

  (_base = String.prototype).trim || (_base.trim = function() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  });

  (_base1 = String.prototype).explode || (_base1.explode = function() {
    return this.split(/[,\s]+/g);
  });

  (_base2 = String.prototype).startsWith || (_base2.startsWith = function(prefix) {
    return this.substring(0, prefix.length) === prefix;
  });

  (_base3 = Array.prototype).remove || (_base3.remove = function(from, to) {
    var rest;
    rest = this.slice((to || from) + 1 || this.length);
    this.length = (from < 0 ? this.length + from : from);
    return this.push.apply(this, rest);
  });

  (_base4 = Array.prototype).hasCount || (_base4.hasCount = function(arr) {
    var a, b, count, _i, _j, _len, _len1;
    count = 0;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      a = this[_i];
      for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
        b = arr[_j];
        if (a === b) {
          ++count;
          break;
        }
      }
    }
    return count;
  });

  (_base5 = Array.prototype).has || (_base5.has = function(thing) {
    var value, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      value = this[_i];
      if (thing === value) {
        return true;
      }
    }
    return false;
  });

  (_base6 = Date.prototype).toShortDateString || (_base6.toShortDateString = function() {
    return this.toDateString().replace(/^[^\s]+\s/, '');
  });

  (_base7 = Date.prototype).toISODateString || (_base7.toISODateString = Date.prototype.toIsoDateString = function() {
    var pad;
    pad = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n;
      }
    };
    return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + 'Z';
  });

  (_base8 = String.prototype).startsWith || (_base8.startsWith = function(prefix) {
    return this.indexOf(prefix) === 0;
  });

  (_base9 = String.prototype).finishesWith || (_base9.finishesWith = function(suffix) {
    return this.indexOf(suffix) === this.length - 1;
  });

}).call(this);
