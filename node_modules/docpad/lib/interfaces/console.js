// Generated by CoffeeScript 1.3.3
(function() {
  var ConsoleInterface, DocPad, cliColor,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  cliColor = require('caterpillar').cliColor;

  DocPad = require(__dirname + '/../docpad');

  ConsoleInterface = (function() {

    function ConsoleInterface(_arg) {
      this.docpad = _arg.docpad, this.program = _arg.program;
      this.selectSkeletonCallback = __bind(this.selectSkeletonCallback, this);

    }

    ConsoleInterface.prototype.start = function() {
      var actionCompleted, actionDescription, actionName, actions, addAction, applyConfiguration, docpad, logger, me, program;
      me = this;
      program = this.program;
      docpad = this.docpad;
      logger = this.docpad.logger;
      applyConfiguration = function(customConfig) {
        var key, programConfig, value;
        if (customConfig == null) {
          customConfig = {};
        }
        programConfig = program;
        for (key in programConfig) {
          if (!__hasProp.call(programConfig, key)) continue;
          value = programConfig[key];
          if (docpad.config[key] != null) {
            docpad.config[key] = value;
          }
        }
        for (key in customConfig) {
          if (!__hasProp.call(customConfig, key)) continue;
          value = customConfig[key];
          if (docpad.config[key] != null) {
            docpad.config[key] = value;
          }
        }
        return docpad.config;
      };
      actionCompleted = function(err) {
        if (err) {
          logger.log('error', "Something went wrong with the action");
          logger.log(err);
          process.exit(1);
        } else {
          logger.log('info', "The action completed successfully");
        }
        if (program.mode === 'cli') {
          console.log('');
          return program.emit('cli', []);
        }
      };
      addAction = function(actionName, actionDescription) {
        return program.command(actionName).description(actionDescription).action(function() {
          applyConfiguration();
          return me[actionName](actionCompleted);
        });
      };
      program.version(docpad.version || 'unknown');
      program.option('-f, --force', "force a re-install of all modules").option('-s, --skeleton <skeleton>', "the skeleton to create your project from, defaults to bootstrap").option('-p, --port <port>', "the port to use for the docpad server <port>, defaults to 9788", parseInt).option('-d, --debug [level]', "the level of debug messages you would like to display, if specified defaults to 7, otherwise 6", parseInt);
      actions = {
        'run': 'does everyting: scaffold, generate, watch, server',
        'skeleton': 'fills the current working directory with the optional --skeleton',
        'render': 'render a given file path, if stdin is provided use that in combination',
        'generate': '(re)generates the output',
        'watch': '(re)generates the output whenever a change is made',
        'server': 'creates a docpad server instance with the optional --port',
        'install': 'ensure docpad is installed correctly',
        'cli': 'start the interactive cli',
        'clean': 'clean everything (will remove your outdir)',
        'exit': 'exit the cli',
        'info': 'display information about our docpad instance',
        'help': 'display the cli help'
      };
      for (actionName in actions) {
        if (!__hasProp.call(actions, actionName)) continue;
        actionDescription = actions[actionName];
        addAction(actionName, actionDescription);
      }
      program.command('*').action(function() {
        return program.emit('help', []);
      });
      return this.program.parse(process.argv);
    };

    ConsoleInterface.prototype.welcome = function() {
      var docpad, logger;
      docpad = this.docpad;
      logger = this.docpad.logger;
      if (this.welcomed) {
        return;
      }
      this.welcomed = true;
      return logger.log('info', "Welcome to DocPad v" + docpad.version);
    };

    ConsoleInterface.prototype.selectSkeletonCallback = function(skeletons, next) {
      var docpad, ids, program, skeleton, skeletonDescription, skeletonId;
      program = this.program;
      docpad = this.docpad;
      ids = [];
      console.log(cliColor.bold('You are about to create your new project inside your current directory. Below is a list of skeletons to bootstrap your new project:\n'));
      for (skeletonId in skeletons) {
        if (!__hasProp.call(skeletons, skeletonId)) continue;
        skeleton = skeletons[skeletonId];
        ids.push(skeletonId);
        skeletonDescription = skeleton.description.replace(/\n/g, '\n\t');
        console.log("\t" + (cliColor.bold(skeletonId)) + "\n\t" + skeletonDescription + "\n");
      }
      console.log(cliColor.bold('Which skeleton will you use?'));
      program.choose(ids, function(i) {
        skeletonId = ids[i];
        return next(null, skeletonId);
      });
      return this;
    };

    ConsoleInterface.prototype.cli = function(next) {
      var program;
      this.welcome();
      program = this.program;
      program.mode = 'cli';
      return program.promptSingleLine('What would you like to do now?\n> ', function(input) {
        var args;
        args = input.split(/\s+/g);
        if (args.length) {
          if (args[0] === 'docpad') {
            args.shift();
          }
        }
        args.unshift(process.argv[0]);
        args.unshift(process.argv[1]);
        return program.parse(args);
      });
    };

    ConsoleInterface.prototype.exit = function() {
      return process.exit(0);
    };

    ConsoleInterface.prototype.generate = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      return docpad.action('generate', next);
    };

    ConsoleInterface.prototype.help = function(next) {
      var program;
      this.welcome();
      program = this.program;
      console.log(program.helpInformation());
      return next();
    };

    ConsoleInterface.prototype.info = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      console.log(require('util').inspect(docpad.config));
      return next();
    };

    ConsoleInterface.prototype.install = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      return docpad.action('install', next);
    };

    ConsoleInterface.prototype.render = function() {
      var details, docpad, program, renderDocument, stdin, timeout, useStdin;
      docpad = this.docpad;
      docpad.setLogLevel(5);
      program = this.program;
      if (program.args.length === 1) {
        return docpad.error("You must pass a filename to the render command");
      }
      details = {
        filename: program.args[0],
        content: ''
      };
      useStdin = true;
      renderDocument = function() {
        return docpad.action('render', details, function(err, document) {
          if (err) {
            throw err;
          }
          console.log(document.get('contentRendered'));
          return process.exit(0);
        });
      };
      timeout = setTimeout(function() {
        timeout = null;
        if (details.content.replace(/\s+/, '')) {
          return;
        }
        useStdin = false;
        stdin.pause();
        return renderDocument();
      }, 1000);
      stdin = process.stdin;
      stdin.resume();
      stdin.setEncoding('utf8');
      stdin.on('data', function(data) {
        return details.content += data.toString();
      });
      return process.stdin.on('end', function() {
        if (!useStdin) {
          return;
        }
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        return renderDocument();
      });
    };

    ConsoleInterface.prototype.run = function(next) {
      var docpad, opts;
      this.welcome();
      docpad = this.docpad;
      opts = {
        selectSkeletonCallback: this.selectSkeletonCallback
      };
      return docpad.action('all', opts, next);
    };

    ConsoleInterface.prototype.server = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      return docpad.action('server', next);
    };

    ConsoleInterface.prototype.clean = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      return docpad.action('clean', next);
    };

    ConsoleInterface.prototype.skeleton = function(next) {
      var docpad, opts, program;
      this.welcome();
      program = this.program;
      docpad = this.docpad;
      opts = {
        selectSkeletonCallback: this.selectSkeletonCallback
      };
      return docpad.action('skeleton', opts, next);
    };

    ConsoleInterface.prototype.watch = function(next) {
      var docpad;
      this.welcome();
      docpad = this.docpad;
      return docpad.action('watch', next);
    };

    return ConsoleInterface;

  })();

  module.exports = ConsoleInterface;

}).call(this);
