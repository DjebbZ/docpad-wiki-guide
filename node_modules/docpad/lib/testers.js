// Generated by CoffeeScript 1.3.3
(function() {
  var DocPad, PluginTester, RendererTester, ServerTester, Tester, assert, balUtil, chai, expect, path, pluginPort, request, underscore, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  _ = underscore = require('underscore');

  balUtil = require('bal-util');

  chai = require('chai');

  expect = chai.expect;

  assert = chai.assert;

  request = require('request');

  DocPad = require(__dirname + '/docpad');

  pluginPort = 3183;

  Tester = (function() {

    function Tester() {}

    Tester.prototype.chai = chai;

    Tester.prototype.expect = expect;

    Tester.prototype.assert = assert;

    Tester.prototype.test = function() {
      return this;
    };

    return Tester;

  })();

  PluginTester = (function(_super) {

    __extends(PluginTester, _super);

    PluginTester.prototype.config = {
      pluginName: null,
      pluginPath: null,
      outExpectedPath: null
    };

    PluginTester.prototype.docpadConfig = {
      port: pluginPort++,
      growl: false,
      logLevel: 5,
      rootPath: null,
      pluginPaths: null,
      enableUnlistedPlugins: false,
      enabledPlugins: null
    };

    PluginTester.prototype.docpad = null;

    PluginTester.prototype.logger = null;

    function PluginTester(config) {
      var defaultEnabledPlugins, _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref;
      config || (config = {});
      this.config = _.extend({}, PluginTester.prototype.config, this.config, config);
      this.docpadConfig = _.extend({}, PluginTester.prototype.docpadConfig, this.docpadConfig);
      (_base = this.config).testPath || (_base.testPath = path.join(this.config.pluginPath, 'test'));
      (_base1 = this.config).outExpectedPath || (_base1.outExpectedPath = path.join(this.config.testPath, 'out-expected'));
      (_base2 = this.docpadConfig).rootPath || (_base2.rootPath = this.config.testPath);
      (_base3 = this.docpadConfig).outPath || (_base3.outPath = path.join(this.docpadConfig.rootPath, 'out'));
      (_base4 = this.docpadConfig).srcPath || (_base4.srcPath = path.join(this.docpadConfig.rootPath, 'src'));
      if ((_ref = (_base5 = this.docpadConfig).pluginPaths) == null) {
        _base5.pluginPaths = [this.config.pluginPath];
      }
      defaultEnabledPlugins = {};
      defaultEnabledPlugins[this.config.pluginName] = true;
      (_base6 = this.docpadConfig).enabledPlugins || (_base6.enabledPlugins = defaultEnabledPlugins);
    }

    PluginTester.prototype.createInstance = function(next) {
      var docpadConfig, tester;
      tester = this;
      docpadConfig = _.extend({}, this.docpadConfig);
      this.docpad = DocPad.createInstance(docpadConfig, function(err) {
        if (err) {
          return next(err);
        }
        tester.logger = tester.docpad.logger;
        return docpad.action('clean', next);
      });
      return this;
    };

    PluginTester.prototype.performServer = function(next) {
      var docpad;
      docpad = this.docpad;
      docpad.action('server', next);
      return this;
    };

    PluginTester.prototype.performGeneration = function(next) {
      var docpad;
      docpad = this.docpad;
      docpad.action('generate', next);
      return this;
    };

    PluginTester.prototype.testCreation = function(next) {
      var tester;
      tester = this;
      describe("create", function() {
        return it('should create a docpad instance successfully', function(done) {
          this.timeout(60 * 5000);
          return tester.createInstance(function(err) {
            done(err);
            return next();
          });
        });
      });
      return this;
    };

    PluginTester.prototype.testLoaded = function(next) {
      var config, docpad;
      config = this.config;
      docpad = this.docpad;
      describe("" + this.config.pluginName + " load", function() {
        return it('should load the plugin correctly', function(done) {
          this.timeout(60 * 5000);
          return docpad.loadedPlugin(config.pluginName, function(err, loaded) {
            if (err) {
              return done(err);
            }
            expect(loaded).to.be.ok;
            done();
            return next();
          });
        });
      });
      return this;
    };

    PluginTester.prototype.testGeneration = function(next) {
      var docpad, tester;
      tester = this;
      docpad = this.docpad;
      describe("" + this.config.pluginName + " generate", function() {
        return it('should generate successfully', function(done) {
          this.timeout(60 * 5000);
          return tester.performGeneration(function(err) {
            if (err) {
              return done(err);
            }
            return balUtil.scantree(tester.docpadConfig.outPath, function(err, outResults) {
              if (err) {
                return done(err);
              }
              return balUtil.scantree(tester.config.outExpectedPath, function(err, outExpectedResults) {
                if (err) {
                  return done(err);
                }
                expect(outResults).to.eql(outExpectedResults);
                done();
                return next();
              });
            });
          });
        });
      });
      return this;
    };

    return PluginTester;

  })(Tester);

  ServerTester = (function(_super) {

    __extends(ServerTester, _super);

    function ServerTester() {
      return ServerTester.__super__.constructor.apply(this, arguments);
    }

    ServerTester.prototype.test = function(next) {
      var tasks, tester;
      tester = this;
      tasks = new balUtil.Group(next);
      this.testCreation(function() {
        return tester.performGeneration(function(err) {
          if (err) {
            throw err;
          }
          return tester.performServer(function(err) {
            if (err) {
              throw err;
            }
            tasks.push(function(complete) {
              return tester.testLoaded(complete);
            });
            tasks.push(function(complete) {
              return tester.testServer(complete);
            });
            return tasks.sync();
          });
        });
      });
      return this;
    };

    ServerTester.prototype.testServer = function(next) {
      return typeof next === "function" ? next() : void 0;
    };

    return ServerTester;

  })(PluginTester);

  RendererTester = (function(_super) {

    __extends(RendererTester, _super);

    function RendererTester() {
      return RendererTester.__super__.constructor.apply(this, arguments);
    }

    RendererTester.prototype.test = function(next) {
      var tasks, tester;
      tester = this;
      tasks = new balUtil.Group(next);
      this.testCreation(function() {
        tasks.push(function(complete) {
          return tester.testLoaded(complete);
        });
        tasks.push(function(complete) {
          return tester.testGeneration(complete);
        });
        return tasks.sync();
      });
      return this;
    };

    return RendererTester;

  })(PluginTester);

  module.exports = {
    Tester: Tester,
    PluginTester: PluginTester,
    RendererTester: RendererTester,
    ServerTester: ServerTester,
    underscore: underscore,
    balUtil: balUtil,
    chai: chai,
    expect: expect,
    assert: assert,
    request: request
  };

}).call(this);
