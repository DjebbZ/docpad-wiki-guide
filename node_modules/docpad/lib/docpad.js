// Generated by CoffeeScript 1.3.3
(function() {
  var Base, BasePlugin, CSON, DocPad, DocumentModel, ElementsCollection, EventSystem, FileModel, PluginLoader, QueryCollection, ScriptsCollection, StylesCollection, airbrake, balUtil, caterpillar, fsUtil, pathUtil, queryEngine, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  pathUtil = require('path');

  fsUtil = require('fs');

  _ = require('underscore');

  caterpillar = require('caterpillar');

  queryEngine = require('query-engine');

  CSON = require('cson');

  balUtil = require('bal-util');

  EventSystem = balUtil.EventSystem;

  airbrake = null;

  PluginLoader = require(__dirname + '/plugin-loader');

  BasePlugin = require(__dirname + '/plugin');

  Base = require(__dirname + '/base');

  FileModel = require(__dirname + '/models/file');

  DocumentModel = require(__dirname + '/models/document');

  QueryCollection = require(__dirname + '/base').QueryCollection;

  ElementsCollection = require(__dirname + '/collections/elements');

  ScriptsCollection = require(__dirname + '/collections/scripts');

  StylesCollection = require(__dirname + '/collections/styles');

  require(__dirname + '/prototypes');

  /*
  The DocPad Class
  It extends the EventSystem from bal-util to provide system events
  It allows us to support multiple instances of docpad at the same time
  */


  DocPad = (function(_super) {

    __extends(DocPad, _super);

    DocPad.prototype.version = null;

    DocPad.prototype.server = null;

    DocPad.prototype.logger = null;

    DocPad.prototype.FileModel = FileModel;

    DocPad.prototype.DocumentModel = DocumentModel;

    DocPad.prototype.QueryCollection = QueryCollection;

    DocPad.prototype.ElementsCollection = ElementsCollection;

    DocPad.prototype.ScriptsCollection = ScriptsCollection;

    DocPad.prototype.StylesCollection = StylesCollection;

    DocPad.prototype.blocks = null;

    /* {
    		# A collection of meta elements
    		meta: null  # Elements Collection
    
    		# A collection of script elements
    		scripts: null  # Scripts Collection
    
    		# Collection of style elements
    		styles: null  # Styles Collection
    	}
    */


    DocPad.prototype.collections = null;

    /* {
    		# Documents collection
    		documents: null  # QueryEngine Collection
    
    		# Files collection
    		files: null  # QueryEngine Collection
    
    		# Layouts collection
    		layouts: null  # QueryEngine Collection
    	}
    */


    DocPad.prototype.database = null;

    DocPad.prototype.documents = null;

    DocPad.prototype.slowPlugins = null;

    DocPad.prototype.foundPlugins = null;

    DocPad.prototype.loadedPlugins = null;

    DocPad.prototype.exchange = null;

    DocPad.prototype.corePath = pathUtil.join(__dirname, '..');

    DocPad.prototype.libPath = __dirname;

    DocPad.prototype.mainPath = pathUtil.join(__dirname, 'docpad');

    DocPad.prototype.packagePath = pathUtil.join(__dirname, '..', 'package.json');

    DocPad.prototype.npmPath = pathUtil.join(__dirname, '..', 'node_modules', 'npm', 'bin', 'npm-cli.js');

    /*
    	Instance Configuration
    	Loaded from:
    		- the passed instanceConfiguration when creating a new DocPad instance
    		- the detected websiteConfiguration inside ./docpad.cson>docpad
    		- the following configuration
    */


    DocPad.prototype.config = {
      force: false,
      enableUnlistedPlugins: true,
      enabledPlugins: null,
      skipUnsupportedPlugins: true,
      plugins: null,
      exchangeUrl: 'https://raw.github.com/bevry/docpad-extras/docpad-5.x/exchange.json',
      rootPath: '.',
      packagePath: 'package.json',
      configPath: 'docpad.cson',
      outPath: 'out',
      srcPath: 'src',
      documentsPath: null,
      documentsPaths: [pathUtil.join('src', 'documents')],
      filesPath: null,
      filesPaths: [pathUtil.join('src', 'files'), pathUtil.join('src', 'public')],
      layoutsPath: null,
      layoutsPaths: [pathUtil.join('src', 'layouts')],
      pluginPaths: [],
      pluginsPaths: ['node_modules', 'plugins'],
      server: null,
      extendServer: true,
      port: 9778,
      maxAge: false,
      logLevel: (process.argv.has('-d') ? 7 : 6),
      logger: null,
      growl: true,
      nodePath: /node$/.test(process.execPath) ? process.execPath : 'node',
      gitPath: /^win/.test(process.platform) ? 'git.cmd' : 'git',
      templateData: null,
      reportErrors: true,
      checkVersion: true,
      collections: null
    };

    function DocPad(config, next) {
      var docpad, logger,
        _this = this;
      if (config == null) {
        config = {};
      }
      this.notify = __bind(this.notify, this);

      docpad = this;
      _.bindAll(this, 'createDocument', 'createFile');
      this.setMaxListeners(0);
      this.logger = new caterpillar.Logger({
        transports: {
          formatter: {
            module: module
          }
        }
      });
      this.setLogLevel(6);
      logger = this.logger;
      process.setMaxListeners(0);
      process.on('uncaughtException', function(err) {
        return docpad.error(err);
      });
      this.slowPlugins = {};
      this.foundPlugins = {};
      this.loadedPlugins = {};
      this.exchange = {};
      this.collections = {};
      this.blocks = {};
      this.config.enabledPlugins = {};
      this.config.plugins = {};
      this.config.templateData = {};
      this.config.collections = {};
      this.config.documentsPaths = this.config.documentsPaths.slice(0);
      this.config.filesPaths = this.config.filesPaths.slice(0);
      this.config.layoutsPaths = this.config.layoutsPaths.slice(0);
      this.config.pluginPaths = this.config.pluginPaths.slice(0);
      this.config.pluginsPaths = this.config.pluginsPaths.slice(0);
      this.database = new this.QueryCollection();
      this.loadConfiguration(config, {}, function(err) {
        if (err) {
          return _this.error(err);
        }
        _this.collections.documents = _this.database.createLiveChildCollection().setQuery('isDocument', {
          fullPath: {
            $beginsWith: _this.config.documentsPaths
          }
        });
        _this.collections.files = _this.database.createLiveChildCollection().setQuery('isFile', {
          fullPath: {
            $beginsWith: _this.config.filesPaths
          }
        });
        _this.collections.layouts = _this.database.createLiveChildCollection().setQuery('isLayout', {
          fullPath: {
            $beginsWith: _this.config.layoutsPaths
          }
        });
        _this.documents = _this.collections.documents;
        _this.blocks.meta = new _this.ElementsCollection();
        _this.blocks.scripts = new _this.ScriptsCollection();
        _this.blocks.styles = new _this.StylesCollection();
        _this.blocks.meta.add(['<meta http-equiv="X-Powered-By" content="DocPad"/>']);
        if (_this.config.reportErrors && /win/.test(process.platform) === false) {
          airbrake = require('airbrake').createClient('e7374dd1c5a346efe3895b9b0c1c0325');
        }
        _this.compareVersion();
        logger.log('debug', 'DocPad loaded succesfully');
        logger.log('debug', 'Loaded the following plugins:', _.keys(_this.loadedPlugins).sort().join(', '));
        return typeof next === "function" ? next() : void 0;
      });
    }

    DocPad.prototype.clean = function() {
      this.database.reset([]);
      this.blocks.meta.reset([]);
      this.blocks.scripts.reset([]);
      this.blocks.styles.reset([]);
      return this;
    };

    DocPad.prototype.loadConfigUrl = function(configUrl, next) {
      this.logger.log('debug', "Loading configuration url: " + configUrl);
      balUtil.readPath(configUrl, function(err, data) {
        if (err) {
          return next(err);
        }
        return CSON.parse(data.toString(), next);
      });
      return this;
    };

    DocPad.prototype.loadConfigPath = function(configPath, next) {
      this.logger.log('debug', "Loading configuration path: " + configPath);
      pathUtil.exists(configPath, function(exists) {
        if (!exists) {
          return typeof next === "function" ? next(null, null) : void 0;
        }
        return CSON.parseFile(configPath, next);
      });
      return this;
    };

    DocPad.prototype.loadCollections = function(next) {
      var collections, database, docpad, tasks, _base,
        _this = this;
      docpad = this;
      database = this.database;
      collections = this.collections;
      (_base = this.config).collections || (_base.collections = {});
      tasks = new balUtil.Group(function(err) {
        if (err) {
          docpad.error(err);
        }
        return typeof next === "function" ? next() : void 0;
      });
      _.each(this.config.collections, function(fn, name) {
        return tasks.push(function(complete) {
          var collection;
          if (fn.length === 2) {
            return fn(database, function(err, collection) {
              if (err) {
                docpad.error(err);
              }
              if (collection) {
                collection.live(true);
                collections[name] = collection;
              }
              return complete();
            });
          } else {
            collection = fn(database);
            if (collection) {
              collection.live(true);
              collections[name] = collection;
            }
            return complete();
          }
        });
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.loadConfiguration = function(instanceConfig, options, next) {
      var complete, docpad, fatal, logger, startLoading, _ref,
        _this = this;
      if (instanceConfig == null) {
        instanceConfig = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      logger = this.logger;
      if ((_ref = options.blocking) == null) {
        options.blocking = true;
      }
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      complete = function(err) {
        var nextStep;
        nextStep = function() {
          return docpad.finish('loading', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            return typeof next === "function" ? next(err) : void 0;
          });
        };
        if (options.blocking) {
          return docpad.unblock('generating, watching, serving', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            return nextStep();
          });
        } else {
          return nextStep();
        }
      };
      startLoading = function() {
        return docpad.start('loading', function(lockError) {
          var docpadPackagePath, tasks, websiteConfig, websiteConfigPath, websitePackageConfig, websitePackagePath;
          if (lockError) {
            return fatal(lockError);
          }
          instanceConfig.rootPath || (instanceConfig.rootPath = process.cwd());
          instanceConfig.packagePath || (instanceConfig.packagePath = _this.config.packagePath);
          instanceConfig.configPath || (instanceConfig.configPath = _this.config.configPath);
          docpadPackagePath = _this.packagePath;
          websitePackagePath = pathUtil.resolve(instanceConfig.rootPath, instanceConfig.packagePath);
          websiteConfigPath = pathUtil.resolve(instanceConfig.rootPath, instanceConfig.configPath);
          websitePackageConfig = {};
          websiteConfig = {};
          tasks = new balUtil.Group(function(err) {
            var config, key, postTasks, type, typePath, typePaths, _i, _j, _len, _len1, _ref1;
            if (err) {
              return fatal(err);
            }
            config = _.extend({}, _this.config, websitePackageConfig, websiteConfig, instanceConfig);
            config.enabledPlugins = _.extend({}, _this.config.enabledPlugins || {}, websiteConfig.enabledPlugins || {}, instanceConfig.enabledPlugins || {});
            config.templateData = _.extend({}, _this.config.templateData || {}, websiteConfig.templateData || {}, instanceConfig.templateData || {});
            _this.config = config;
            if (_this.config.server) {
              _this.server = _this.config.server;
            }
            _this.config.rootPath = pathUtil.normalize(_this.config.rootPath || process.cwd());
            _this.config.outPath = pathUtil.resolve(_this.config.rootPath, _this.config.outPath);
            _this.config.srcPath = pathUtil.resolve(_this.config.rootPath, _this.config.srcPath);
            _ref1 = ['documents', 'files', 'layouts', 'plugins'];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              type = _ref1[_i];
              typePath = _this.config[type + 'Path'];
              typePaths = _this.config[type + 'Paths'];
              if (typePath) {
                typePaths.push(typePath);
              }
              for (key = _j = 0, _len1 = typePaths.length; _j < _len1; key = ++_j) {
                typePath = typePaths[key];
                typePaths[key] = pathUtil.resolve(_this.config.rootPath, typePath);
              }
            }
            if (_this.config.logger) {
              _this.logger = _this.config.logger;
            }
            _this.setLogLevel(_this.config.logLevel);
            postTasks = new balUtil.Group(function(err) {
              if (err) {
                return fatal(err);
              }
              return complete();
            });
            postTasks.total = 2;
            _this.loadCollections(postTasks.completer());
            return _this.loadPlugins(postTasks.completer());
          });
          tasks.total = 3;
          _this.loadConfigPath(docpadPackagePath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            docpad.version = data.version;
            if (airbrake) {
              airbrake.appVersion = docpad.version;
            }
            return tasks.complete();
          });
          _this.loadConfigPath(websitePackagePath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            websitePackageConfig = data.docpad || {};
            return tasks.complete();
          });
          return _this.loadConfigPath(websiteConfigPath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            websiteConfig = data;
            return tasks.complete();
          });
        });
      };
      if (options.blocking) {
        docpad.block('generating, watching, serving', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return startLoading();
        });
      } else {
        startLoading();
      }
      return this;
    };

    DocPad.prototype.initNodeModules = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts.npmPath = this.npmPath;
      opts.nodePath = this.config.nodePath;
      opts.force = this.config.force;
      balUtil.initNodeModules(opts);
      return this;
    };

    DocPad.prototype.setLogLevel = function(level) {
      this.logger.setLevel(level);
      return this;
    };

    DocPad.prototype.getLogLevel = function() {
      return this.config.logLevel;
    };

    DocPad.prototype.getDebugging = function() {
      return this.getLogLevel() === 7;
    };

    DocPad.prototype.fatal = function(err) {
      if (!err) {
        return this;
      }
      return this.error(err, 'err', function() {
        return process.exit(-1);
      });
    };

    DocPad.prototype.error = function(err, type, next) {
      var docpad, logger;
      if (type == null) {
        type = 'err';
      }
      docpad = this;
      logger = this.logger;
      if (!err || err.logged) {
        if (typeof next === "function") {
          next();
        }
        return this;
      }
      err.logged = true;
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      err.logged = true;
      logger.log(type, 'An error occured:', err.message, err.stack);
      if (docpad.config.reportErrors && airbrake) {
        err.params = {
          docpadVersion: this.version,
          docpadConfig: this.config
        };
        airbrake.notify(err, function(airbrakeErr, airbrakeUrl) {
          if (airbrakeErr) {
            console.log(airbrakeErr);
          }
          console.log('Error has been logged to:', airbrakeUrl);
          return typeof next === "function" ? next() : void 0;
        });
      } else {
        if (typeof next === "function") {
          next();
        }
      }
      return this;
    };

    DocPad.prototype.warn = function(message, err, next) {
      var docpad, logger;
      docpad = this;
      logger = this.logger;
      logger.log('warn', message);
      docpad.error(err, 'warn', next);
      return this;
    };

    DocPad.prototype.notify = function() {
      var args, growl;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.config.growl) {
        return this;
      }
      try {
        growl = require('growl');
        growl.apply(growl, args);
      } catch (err) {

      }
      return this;
    };

    DocPad.prototype.createFile = function(data, options) {
      var file;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      options = _.extend({
        logger: this.logger,
        outDirPath: this.config.outPath
      }, options);
      file = new this.FileModel(data, options);
      return file;
    };

    DocPad.prototype.createDocument = function(data, options) {
      var docpad, document;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      options = _.extend({
        logger: this.logger,
        outDirPath: this.config.outPath,
        layouts: this.collections.layouts
      }, options);
      document = new this.DocumentModel(data, options);
      document.on('render', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.emitSync.apply(docpad, ['render'].concat(__slice.call(args)));
      });
      document.on('renderDocument', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.emitSync.apply(docpad, ['renderDocument'].concat(__slice.call(args)));
      });
      return document;
    };

    DocPad.prototype.getPlugin = function(pluginName) {
      return this.loadedPlugins[pluginName];
    };

    DocPad.prototype.hasPlugins = function() {
      return _.isEmpty(this.loadedPlugins) === false;
    };

    DocPad.prototype.loadPlugins = function(next) {
      var docpad, logger, snore, tasks,
        _this = this;
      docpad = this;
      logger = this.logger;
      this.slowPlugins = {};
      snore = this.createSnore(function() {
        return logger.log('notice', "We're preparing your plugins, this may take a while the first time. Waiting on the plugins: " + (_.keys(docpad.slowPlugins).join(', ')));
      });
      tasks = new balUtil.Group(function(err) {
        docpad.slowPlugins = {};
        snore.clear();
        return typeof next === "function" ? next(err) : void 0;
      });
      _.each(this.config.pluginsPaths || [], function(pluginsPath) {
        var exists;
        exists = pathUtil.existsSync(pluginsPath);
        if (exists) {
          return tasks.push(function(complete) {
            return _this.loadPluginsIn(pluginsPath, complete);
          });
        }
      });
      _.each(this.config.pluginPaths || [], function(pluginPath) {
        var exists;
        exists = pathUtil.existsSync(pluginPath);
        if (exists) {
          return tasks.push(function(complete) {
            return _this.loadPlugin(pluginPath, complete);
          });
        }
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.loadedPlugin = function(pluginName, next) {
      var docpad;
      docpad = this;
      return docpad.onceFinished('loading', function(err) {
        var loaded;
        if (err) {
          return next(err);
        }
        loaded = docpad.loadedPlugins[pluginName] != null;
        return next(null, loaded);
      });
    };

    DocPad.prototype.loadPlugin = function(fileFullPath, _next) {
      var config, docpad, enabled, loader, logger, next, pluginName;
      docpad = this;
      logger = this.logger;
      config = this.config;
      next = function(err) {
        delete docpad.slowPlugins[pluginName];
        return _next(err);
      };
      loader = new PluginLoader({
        dirPath: fileFullPath,
        docpad: docpad,
        BasePlugin: BasePlugin
      });
      pluginName = loader.pluginName;
      enabled = (config.enableUnlistedPlugins && (config.enabledPlugins[pluginName] != null) === false) || config.enabledPlugins[pluginName] === true;
      if (docpad.foundPlugins[pluginName] != null) {
        return _next();
      }
      docpad.slowPlugins[pluginName] = true;
      docpad.foundPlugins[pluginName] = true;
      if (!enabled) {
        logger.log('debug', "Skipped plugin: " + pluginName);
        return next();
      } else {
        logger.log('debug', "Loading plugin: " + pluginName);
        return loader.exists(function(err, exists) {
          if (err || !exists) {
            return next(err);
          }
          return loader.unsupported(function(err, unsupported) {
            if (err) {
              return next(err);
            }
            if (unsupported) {
              if (unsupported === 'version' && docpad.config.skipUnsupportedPlugins === false) {
                logger.log('warn', "Continuing with the unsupported plugin: " + pluginName);
              } else {
                if (unsupported === 'type') {
                  logger.log('debug', "Skipped the unsupported plugin: " + pluginName + " due to " + unsupported);
                } else {
                  logger.log('warn', "Skipped the unsupported plugin: " + pluginName + " due to " + unsupported);
                }
                return next();
              }
            }
            return loader.install(function(err) {
              if (err) {
                return next(err);
              }
              return loader.load(function(err) {
                if (err) {
                  return next(err);
                }
                return loader.create({}, function(err, pluginInstance) {
                  if (err) {
                    return next(err);
                  }
                  docpad.loadedPlugins[loader.pluginName] = pluginInstance;
                  logger.log('debug', "Loaded plugin: " + pluginName);
                  return next();
                });
              });
            });
          });
        });
      }
    };

    DocPad.prototype.loadPluginsIn = function(pluginsPath, next) {
      var docpad, logger;
      docpad = this;
      logger = this.logger;
      logger.log('debug', "Plugins loading for: " + pluginsPath);
      balUtil.scandir({
        path: pluginsPath,
        ignorePatterns: true,
        fileAction: false,
        dirAction: function(fileFullPath, fileRelativePath, _nextFile) {
          var nextFile, pluginName;
          pluginName = pathUtil.basename(fileFullPath);
          if (fileFullPath === pluginsPath) {
            return _nextFile(null, false);
          }
          nextFile = function(err, skip) {
            if (err) {
              docpad.warn("Failed to load the plugin: " + pluginName + " at " + fileFullPath + ". The error follows:", err);
            }
            return _nextFile(null, skip);
          };
          return docpad.loadPlugin(fileFullPath, function(err) {
            return nextFile(err, true);
          });
        },
        next: function(err) {
          logger.log('debug', "Plugins loaded for: " + pluginsPath);
          return typeof next === "function" ? next(err) : void 0;
        }
      });
      return this;
    };

    DocPad.prototype.createSnore = function(message) {
      var logger, snore;
      logger = this.logger;
      return snore = {
        snoring: false,
        timer: setTimeout(function() {
          snore.clear();
          snore.snoring = true;
          if (_.isFunction(message)) {
            return message();
          } else {
            return logger.log('notice', message);
          }
        }, 5000),
        clear: function() {
          if (snore.timer) {
            clearTimeout(snore.timer);
            return snore.timer = false;
          }
        }
      };
    };

    DocPad.prototype.compareVersion = function() {
      var docpad, logger, notify;
      if (!this.config.checkVersion) {
        return this;
      }
      docpad = this;
      notify = this.notify;
      logger = this.logger;
      balUtil.packageCompare({
        local: pathUtil.join(docpad.corePath, 'package.json'),
        remote: 'https://raw.github.com/bevry/docpad/master/package.json',
        newVersionCallback: function(details) {
          docpad.notify("There is a new version of " + details.local.name + " available");
          return docpad.logger.log('notice', "There is a new version of " + details.local.name + " available, you should probably upgrade...\ncurrent version:  " + details.local.version + "\nnew version:      " + details.remote.version + "\ngrab it here:     " + details.remote.homepage);
        }
      });
      return this;
    };

    DocPad.prototype.getTemplateData = function(userData) {
      var docpad, templateData, _base, _base1;
      userData || (userData = {});
      docpad = this;
      templateData = _.extend({
        require: require,
        include: function(subRelativePath) {
          var fullRelativePath, result, warn;
          fullRelativePath = this.document.relativeDirPath + '/' + subRelativePath;
          result = docpad.database.findOne({
            relativePath: fullRelativePath
          });
          if (result) {
            return result.get('contentRendered') || result.get('content');
          } else {
            warn = "The file " + relativeBase + " was not found...";
            docpad.warn(warn);
            return warn;
          }
        },
        docpad: this,
        database: this.database,
        collections: this.collections,
        document: null,
        site: {},
        blocks: this.blocks
      }, this.config.templateData, userData);
      (_base = templateData.site).date || (_base.date = new Date());
      (_base1 = templateData.site).keywords || (_base1.keywords = []);
      if (_.isString(templateData.site.keywords)) {
        templateData.site.keywords = templateData.site.keywords.split(/,\s*/g);
      }
      return templateData;
    };

    DocPad.prototype.render = function(document, templateData, next) {
      var _this = this;
      templateData = _.extend({}, templateData);
      templateData.document = document.toJSON();
      templateData.documentModel = document;
      document.render(templateData, function(err) {
        if (err) {
          _this.error(err);
        }
        return typeof next === "function" ? next(err, document) : void 0;
      });
      return this;
    };

    DocPad.prototype.prepareAndRender = function(document, templateData, next) {
      var docpad;
      docpad = this;
      document.normalize(function(err) {
        if (err) {
          return typeof next === "function" ? next(err) : void 0;
        }
        return document.load(function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          return document.contextualize(function(err) {
            if (err) {
              return typeof next === "function" ? next(err) : void 0;
            }
            return docpad.render(document, templateData, function(err) {
              return typeof next === "function" ? next(err, document) : void 0;
            });
          });
        });
      });
      return this;
    };

    DocPad.prototype.parseDirectory = function(opts) {
      var createFunction, docpad, logger, next, path, resultCollection;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      logger = this.logger;
      path = opts.path, createFunction = opts.createFunction, resultCollection = opts.resultCollection, next = opts.next;
      if (!pathUtil.existsSync(path)) {
        logger.log('debug', "Skipped directory: " + path + " (it does not exist)");
        return typeof next === "function" ? next() : void 0;
      }
      logger.log('debug', "Parsing directory: " + path);
      balUtil.scandir({
        path: path,
        ignorePatterns: true,
        fileAction: function(fileFullPath, fileRelativePath, nextFile, fileStat) {
          var data, file, options;
          data = {
            fullPath: fileFullPath,
            relativePath: fileRelativePath
          };
          options = {
            stat: fileStat
          };
          file = createFunction(data, options);
          return file.load(function(err) {
            var fileIgnored, fileParse;
            logger.log('debug', "Loading file: " + fileRelativePath);
            if (err) {
              docpad.warn("Failed to load the file: " + fileRelativePath + ". The error follows:", err);
              return nextFile();
            }
            fileIgnored = file.get('ignored');
            fileParse = file.get('parse');
            if (fileIgnored || ((fileParse != null) && !fileParse)) {
              logger.log('info', 'Skipped manually ignored file:', file.get('relativePath'));
              return nextFile();
            } else {
              logger.log('debug', 'Loaded file:', file.get('relativePath'));
            }
            if (resultCollection != null) {
              resultCollection.add(file);
            }
            return nextFile();
          });
        },
        next: function(err) {
          logger.log('debug', "Parsed directory: " + path);
          return typeof next === "function" ? next(err) : void 0;
        }
      });
      return this;
    };

    DocPad.prototype.contextualizeFiles = function(opts) {
      var collection, docpad, logger, next, tasks;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      logger = this.logger;
      collection = opts.collection, next = opts.next;
      logger.log('debug', "Contextualizing " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return typeof next === "function" ? next(err) : void 0;
        }
        logger.log('debug', "Contextualized " + collection.length + " files");
        return typeof next === "function" ? next() : void 0;
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          return file.contextualize(complete);
        });
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.renderDocuments = function(opts) {
      var collection, docpad, logger, next, tasks, templateData,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      logger = this.logger;
      collection = opts.collection, next = opts.next;
      logger.log('debug', "Rendering " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return typeof next === "function" ? next(err) : void 0;
        }
        return docpad.emitSync('renderAfter', {}, function(err) {
          if (!err) {
            logger.log('debug', "Rendered " + collection.length + " files");
          }
          return typeof next === "function" ? next(err) : void 0;
        });
      });
      templateData = this.getTemplateData({
        documents: this.documents.sortArray({
          date: -1
        })
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          var dynamic, render;
          dynamic = file.get('dynamic');
          render = file.get('render');
          if (dynamic || ((render != null) && !render)) {
            return complete();
          }
          return docpad.render(file, templateData, complete);
        });
      });
      if (tasks.total) {
        this.emitSync('renderBefore', {
          collection: collection,
          templateData: templateData
        }, function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          return tasks.async();
        });
      } else {
        tasks.exit();
      }
      return this;
    };

    DocPad.prototype.writeFiles = function(opts) {
      var collection, docpad, logger, next, tasks;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      logger = this.logger;
      collection = opts.collection, next = opts.next;
      logger.log('debug', "Writing " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (!err) {
          logger.log('debug', "Wrote " + collection.length + " files");
        }
        return typeof next === "function" ? next(err) : void 0;
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          var dynamic, outPath, relativePath, render, write;
          outPath = file.get('outPath');
          relativePath = file.get('relativePath');
          dynamic = file.get('dynamic');
          render = file.get('render');
          write = file.get('write');
          if (dynamic || ((render != null) && !render) || ((write != null) && !write)) {
            return complete();
          }
          return balUtil.ensurePath(pathUtil.dirname(outPath), function(err) {
            if (err) {
              return complete(err);
            }
            logger.log('debug', "Writing file: " + relativePath);
            if (file.writeRendered != null) {
              return file.writeRendered(complete);
            } else {
              return file.write(complete);
            }
          });
        });
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.getExchange = function(next) {
      if (!_.isEmpty(this.exchange)) {
        return next(null, this.exchange);
      }
      this.loadConfigUrl(this.config.exchangeUrl, function(err, parsedData) {
        if (err) {
          return next(err);
        }
        this.exchange = parsedData;
        return next(null, parsedData);
      });
      return this;
    };

    DocPad.prototype.getSkeletons = function(next) {
      this.getExchange(function(err, exchange) {
        var skeletons;
        if (err) {
          return next(err);
        }
        skeletons = exchange.skeletons;
        return next(null, skeletons);
      });
      return this;
    };

    DocPad.prototype.getSkeleton = function(skeletonId, next) {
      this.getSkeletons(function(err, skeletons) {
        var skeletonDetails;
        if (err) {
          return next(err);
        }
        skeletonDetails = skeletons[skeletonId];
        return next(null, skeletonDetails);
      });
      return this;
    };

    DocPad.prototype.installSkeleton = function(skeletonId, destinationPath, next) {
      var docpad, logger, packagePath;
      docpad = this;
      logger = this.logger;
      packagePath = pathUtil.join(destinationPath, 'package.json');
      this.getSkeleton(skeletonId, function(err, skeletonDetails) {
        var repoConfig;
        if (err) {
          return docpad.error(err);
        }
        repoConfig = {
          gitPath: docpad.config.gitPath,
          path: destinationPath,
          url: skeletonDetails.repo,
          branch: skeletonDetails.branch,
          remote: 'skeleton',
          output: docpad.getDebugging(),
          next: function(err) {
            var _this = this;
            if (err) {
              return docpad.error(err);
            }
            return docpad.initNodeModules({
              path: destinationPath,
              next: function(err) {
                if (err) {
                  return docpad.error(err);
                }
                return typeof next === "function" ? next() : void 0;
              }
            });
          }
        };
        return balUtil.ensurePath(destinationPath, function(err) {
          if (err) {
            return docpad.error(err);
          }
          return balUtil.initGitRepo(repoConfig);
        });
      });
      return this;
    };

    DocPad.prototype.getActionArgs = function(opts, next) {
      if (typeof opts === 'function' && (next != null) === false) {
        next = opts;
        opts = {};
      } else {
        opts || (opts = {});
      }
      next || (next = opts.next || null);
      return {
        next: next,
        opts: opts
      };
    };

    DocPad.prototype.action = function(action, opts, next) {
      var actions, logger, tasks, _i, _len, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      logger = this.logger;
      actions = action.split(/[,\s]+/g);
      if (actions.length > 1) {
        tasks = new balUtil.Group(next);
        tasks.total = actions.length;
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          this.action(action, tasks.completer());
        }
        return this;
      }
      logger.log('debug', "Performing the action " + action);
      switch (action) {
        case 'install':
        case 'update':
          this.installAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        case 'skeleton':
        case 'scaffold':
          this.skeletonAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        case 'generate':
          this.generateAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        case 'clean':
          this.cleanAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        case 'render':
          this.renderAction(opts, function(err, data) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next(err, data) : void 0;
          });
          break;
        case 'watch':
          this.watchAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        case 'server':
        case 'serve':
          this.serverAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
          break;
        default:
          this.runAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return typeof next === "function" ? next() : void 0;
          });
      }
      return this;
    };

    DocPad.prototype.installAction = function(opts, next) {
      var docpad, logger, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      this.initNodeModules({
        path: this.config.rootPath,
        next: function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          return docpad.loadConfiguration({}, {
            blocking: false
          }, function(err) {
            return typeof next === "function" ? next(err) : void 0;
          });
        }
      });
      return this;
    };

    DocPad.prototype.cleanAction = function(opts, next) {
      var logger;
      logger = this.logger;
      balUtil.rmdirDeep(this.config.outPath, function(err, list, tree) {
        if (!err) {
          logger.log('debug', 'Cleaned files');
        }
        return typeof next === "function" ? next() : void 0;
      });
      return this;
    };

    DocPad.prototype.generateParse = function(next) {
      var config, docpad, logger;
      docpad = this;
      logger = this.logger;
      config = docpad.config;
      this.emitSync('parseBefore', {}, function(err) {
        var tasks;
        if (err) {
          return typeof next === "function" ? next(err) : void 0;
        }
        logger.log('debug', 'Parsing everything');
        tasks = new balUtil.Group(function(err) {
          logger.log('debug', 'Parsed everything');
          logger.log('debug', 'Contextualizing everything');
          if (err) {
            docpad.warn("Failed to parse everything. The error follows:", err);
            return typeof next === "function" ? next(err) : void 0;
          }
          return docpad.generateParseContextualize(function(err) {
            if (err) {
              return typeof next === "function" ? next(err) : void 0;
            }
            return docpad.emitSync('parseAfter', {}, function(err) {
              if (err) {
                docpad.warn("Failed to contextualize everything. The error follows:", err);
              } else {
                logger.log('debug', 'Contextualized everything');
              }
              return typeof next === "function" ? next(err) : void 0;
            });
          });
        });
        _.each(config.documentsPaths, function(documentsPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: documentsPath,
              createFunction: docpad.createDocument,
              resultCollection: docpad.database,
              next: complete
            });
          });
        });
        _.each(config.filesPaths, function(filesPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: filesPath,
              createFunction: docpad.createFile,
              resultCollection: docpad.database,
              next: complete
            });
          });
        });
        _.each(config.layoutsPaths, function(layoutsPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: layoutsPath,
              createFunction: docpad.createDocument,
              resultCollection: docpad.database,
              next: complete
            });
          });
        });
        return tasks.async();
      });
      return this;
    };

    DocPad.prototype.generateParseContextualize = function(next) {
      this.contextualizeFiles({
        collection: this.database,
        next: next
      });
      return this;
    };

    DocPad.prototype.generateRender = function(next) {
      this.renderDocuments({
        collection: this.collections.documents,
        next: next
      });
      return this;
    };

    DocPad.prototype.generateWrite = function(next) {
      var docpad, logger;
      docpad = this;
      logger = this.logger;
      logger.log('debug', 'Writing everything');
      docpad.emitSync('writeBefore', {}, function(err) {
        var tasks;
        tasks = new balUtil.Group(function(err) {
          return docpad.emitSync('writeAfter', {}, function(err) {
            if (!err) {
              logger.log('debug', 'Wrote everything');
            }
            return typeof next === "function" ? next(err) : void 0;
          });
        });
        tasks.total = 2;
        docpad.writeFiles({
          collection: docpad.collections.documents,
          next: tasks.completer()
        });
        return docpad.writeFiles({
          collection: docpad.collections.files,
          next: tasks.completer()
        });
      });
      return this;
    };

    DocPad.prototype.generateAction = function(opts, next) {
      var complete, docpad, fatal, logger, notify, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      notify = this.notify;
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      complete = function(err) {
        return docpad.unblock('loading', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.finish('generating', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            return typeof next === "function" ? next(err) : void 0;
          });
        });
      };
      if (!docpad.hasPlugins()) {
        logger.log('warn', "DocPad is currently running without any plugins installed. You probably want to install some: https://github.com/bevry/docpad/wiki/Plugins");
      }
      docpad.block('loading', function(err) {
        var _this = this;
        if (err) {
          return fatal(err);
        }
        return docpad.start('generating', function(err) {
          if (err) {
            return fatal(err);
          }
          logger.log('info', 'Generating...');
          notify((new Date()).toLocaleTimeString(), {
            title: 'Website generating...'
          });
          return docpad.emitSync('generateBefore', {
            server: docpad.server
          }, function(err) {
            if (err) {
              return complete(err);
            }
            return pathUtil.exists(docpad.config.srcPath, function(exists) {
              if (exists === false) {
                return complete(new Error('Cannot generate website as the src dir was not found'));
              }
              docpad.clean();
              return docpad.generateParse(function(err) {
                if (err) {
                  return complete(err);
                }
                return docpad.generateRender(function(err) {
                  if (err) {
                    return complete(err);
                  }
                  return docpad.generateRender(function(err) {
                    if (err) {
                      return complete(err);
                    }
                    return docpad.generateWrite(function(err) {
                      if (err) {
                        return complete(err);
                      }
                      return docpad.unblock('loading', function(err) {
                        if (err) {
                          return complete(err);
                        }
                        return docpad.emitSync('generateAfter', {
                          server: docpad.server
                        }, function(err) {
                          if (err) {
                            return complete(err);
                          }
                          return docpad.finished('generating', function(err) {
                            if (err) {
                              return complete(err);
                            }
                            logger.log('info', 'Generated');
                            notify((new Date()).toLocaleTimeString(), {
                              title: 'Website generated'
                            });
                            return complete();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
      return this;
    };

    DocPad.prototype.renderAction = function(opts, next) {
      var complete, data, docpad, document, fatal, logger, renderFunction, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      data = opts.data || {};
      if (opts.filename) {
        document = this.createDocument();
        document.set({
          filename: opts.filename,
          fullPath: opts.filename,
          data: opts.content
        });
        renderFunction = 'prepareAndRender';
      } else if (opts.document) {
        document = opts.document;
        renderFunction = 'render';
      }
      if (!document) {
        return typeof next === "function" ? next(new Error('You must pass a document to the renderAction')) : void 0;
      }
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      complete = function(err) {
        return docpad.finish('render', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.unblock('loading, generating', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            return typeof next === "function" ? next(err, document) : void 0;
          });
        });
      };
      docpad.block('loading, generating', function(lockError) {
        if (lockError) {
          return fatal(lockError);
        }
        return docpad.start('render', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          docpad[renderFunction](document, data, complete);
        });
      });
      return this;
    };

    DocPad.prototype.watchAction = function(opts, next) {
      var changeHandler, close, configWatcher, database, docpad, fatal, logger, restart, srcWatcher, watch, watchr, _ref;
      watchr = require('watchr');
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      database = this.database;
      logger = this.logger;
      srcWatcher = null;
      configWatcher = null;
      close = function() {
        if (srcWatcher) {
          srcWatcher.close();
          srcWatcher = null;
        }
        if (configWatcher) {
          configWatcher.close();
          return configWatcher = null;
        }
      };
      restart = function(next) {
        var tasks;
        close();
        tasks = new balUtil.Group(next);
        tasks.total = 2;
        srcWatcher = watchr.watch({
          path: docpad.config.srcPath,
          listener: changeHandler,
          next: tasks.completer(),
          ignorePatterns: true
        });
        if (pathUtil.existsSync(docpad.config.configPath)) {
          return configWatcher = watchr.watch({
            path: docpad.config.configPath,
            listener: function() {
              return docpad.loadConfiguration({}, {
                blocking: false
              }, function() {
                return changeHandler('config');
              });
            },
            next: tasks.completer()
          });
        } else {
          return tasks.complete();
        }
      };
      changeHandler = function(eventName, filePath, fileCurrentStat, filePreviousStat) {
        /*
        			# Differential Rendering?
        			if config.differentialRendering
        
        				# Handle the action
        				if eventName is 'unlink'
        					changedFile.destroy()
        				else if eventName is 'change'
        					# Re-render just this file
        					changedFile = database.findOne(fullPath: filePath)
        					docpad.prepareAndRender changedFile, docpad.getTemplateData(), ->
        						# Re-Render anything that references the changes
        						pendingFiles = database.findAll(references: $has: changedFile).render()
        						docpad.prepareAndRender pend
        
        				else if eventName is 'new'
        
        				# Re-Render anything that should always re-render
        				database.findAll(referencesOthers: true).render()
        
        			# Re-Render everything
        			else
        */
        return docpad.action('generate', function(err) {
          if (err) {
            docpad.error(err);
          }
          return logger.log('Regenerated due to file watch at ' + (new Date()).toLocaleString());
        });
      };
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      watch = function() {
        return docpad.block('loading', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.start('watching', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            logger.log('Watching setup starting...');
            return restart(function(err) {
              return docpad.finish('watching', function(lockError) {
                if (lockError) {
                  return fatal(lockError);
                }
                return docpad.unblock('loading', function(lockError) {
                  if (lockError) {
                    return fatal(lockError);
                  }
                  logger.log('Watching setup');
                  return typeof next === "function" ? next(err) : void 0;
                });
              });
            });
          });
        });
      };
      docpad.when('loading:started', function(err) {
        if (err) {
          return fatal(err);
        }
        close();
        return docpad.onceFinished('loading', function(err) {
          if (err) {
            return fatal(err);
          }
          return watch();
        });
      });
      docpad.whenFinished('generating:started', function(err) {
        if (err) {
          return fatal(err);
        }
        close();
        return docpad.onceFinished('generating', function(err) {
          if (err) {
            return fatal(err);
          }
          return watch();
        });
      });
      watch();
      return this;
    };

    DocPad.prototype.runAction = function(opts, next) {
      var destinationPath, docpad, logger, runDocpad, srcPath, _ref,
        _this = this;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      srcPath = this.config.srcPath;
      destinationPath = this.config.rootPath;
      runDocpad = function() {
        return _this.generateAction(opts, function(err) {
          if (err) {
            return _this.fatal(err);
          }
          return _this.serverAction(opts, function(err) {
            if (err) {
              return _this.fatal(err);
            }
            return _this.watchAction(opts, function(err) {
              if (err) {
                return _this.fatal(err);
              }
              return typeof next === "function" ? next() : void 0;
            });
          });
        });
      };
      if (pathUtil.existsSync(srcPath)) {
        runDocpad();
      } else {
        fsUtil.readdir(destinationPath, function(err, files) {
          if (err) {
            return fatal(err);
          }
          if (files.length) {
            logger.log('warn', "\nWe couldn't find an existing DocPad project inside your current directory.\nIf you're wanting to use a pre-made skeleton for the basis of your new project, then run DocPad again inside an empty directory.\nIf you're wanting to start your new project from scratch, then refer to the Getting Started guide here:\n	https://github.com/bevry/docpad/wiki/Getting-Started\nFor more information on what this means, visit:\n	https://github.com/bevry/docpad/wiki/Troubleshooting");
            return typeof next === "function" ? next() : void 0;
          } else {
            return _this.skeletonAction(opts, function(err) {
              if (err) {
                return _this.fatal(err);
              }
              return runDocpad();
            });
          }
        });
      }
      return this;
    };

    DocPad.prototype.skeletonAction = function(opts, next) {
      var complete, destinationPath, docpad, fatal, logger, selectSkeletonCallback, skeletonId, srcPath, useSkeleton, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      skeletonId = this.config.skeleton;
      srcPath = this.config.srcPath;
      destinationPath = this.config.rootPath;
      selectSkeletonCallback = opts.selectSkeletonCallback || null;
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      complete = function(err) {
        return docpad.finish('skeleton', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.unblock('generating, watching, serving', function(lockError) {
            if (lockError) {
              return fatal(lockError);
            }
            return typeof next === "function" ? next(err) : void 0;
          });
        });
      };
      useSkeleton = function() {
        return docpad.installSkeleton(skeletonId, destinationPath, function(err) {
          if (err) {
            return complete(err);
          }
          return docpad.loadConfiguration({}, {
            blocking: false
          }, function(err) {
            return complete(err);
          });
        });
      };
      docpad.block('generating, watching, serving', function(lockError) {
        if (lockError) {
          return fatal(lockError);
        }
        return docpad.start('skeleton', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return pathUtil.exists(srcPath, function(exists) {
            if (exists) {
              logger.log('warn', "Didn't place the skeleton as the desired structure already exists");
              return complete();
            }
            if (skeletonId) {
              return useSkeleton();
            } else {
              return docpad.getSkeletons(function(err, skeletons) {
                if (err) {
                  return complete(err);
                }
                return selectSkeletonCallback(skeletons, function(err, _skeletonId) {
                  if (err) {
                    return fatal(err);
                  }
                  skeletonId = _skeletonId;
                  return useSkeleton();
                });
              });
            }
          });
        });
      });
      return this;
    };

    DocPad.prototype.serverAction = function(opts, next) {
      var complete, config, docpad, express, fatal, logger, _ref;
      express = require('express');
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      logger = this.logger;
      config = this.config;
      fatal = function(err) {
        return docpad.fatal(err, next);
      };
      complete = function(err) {
        return docpad.finish('serving', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.unblock('loading', function(err) {
            if (lockError) {
              return fatal(lockError);
            }
            return typeof next === "function" ? next(err) : void 0;
          });
        });
      };
      docpad.block('loading', function(lockError) {
        if (lockError) {
          return fatal(lockError);
        }
        return docpad.start('serving', function(lockError) {
          if (lockError) {
            return fatal(lockError);
          }
          return docpad.emitSync('serverBefore', {}, function(err) {
            var address, result, server, serverDir, serverHostname, serverLocation, serverPort;
            if (err) {
              return typeof next === "function" ? next(err) : void 0;
            }
            if (!docpad.server) {
              docpad.server = express.createServer();
            }
            server = docpad.server;
            if (config.extendServer) {
              server.configure(function() {
                server.use(express.bodyParser());
                server.use(express.methodOverride());
                server.use(function(req, res, next) {
                  var tools;
                  tools = res.header('X-Powered-By').split(/[,\s]+/g);
                  tools.push('DocPad');
                  tools = tools.join(',');
                  res.header('X-Powered-By', tools);
                  return next();
                });
                server.use(server.router);
                server.use(function(req, res, next) {
                  var cleanUrl, contentRendered, contentTypeRendered, document, dynamic, templateData, url;
                  if (!docpad.database) {
                    return typeof next === "function" ? next() : void 0;
                  }
                  cleanUrl = req.url.replace(/\?.*/, '');
                  document = docpad.database.findOne({
                    urls: {
                      '$in': cleanUrl
                    }
                  });
                  if (!document) {
                    return typeof next === "function" ? next() : void 0;
                  }
                  contentTypeRendered = document.get('contentTypeRendered');
                  url = document.get('url');
                  dynamic = document.get('dynamic');
                  contentRendered = document.get('contentRendered');
                  if (contentTypeRendered) {
                    res.contentType(contentTypeRendered);
                  }
                  if (dynamic) {
                    templateData = docpad.getTemplateData({
                      req: req
                    });
                    return docpad.render(document, templateData, function(err) {
                      contentRendered = document.get('contentRendered');
                      if (err) {
                        docpad.error(err);
                        return res.send(err.message, 500);
                      } else {
                        return res.send(contentRendered);
                      }
                    });
                  } else {
                    if (contentRendered) {
                      return res.send(contentRendered);
                    } else {
                      return typeof next === "function" ? next() : void 0;
                    }
                  }
                });
                if (config.maxAge) {
                  server.use(express["static"](config.outPath, {
                    maxAge: config.maxAge
                  }));
                } else {
                  server.use(express["static"](config.outPath));
                }
                return server.use(function(req, res, next) {
                  return res.send(404);
                });
              });
              result = server.listen(config.port);
              try {
                address = server.address();
                serverHostname = address.address === '0.0.0.0' ? 'localhost' : address.address;
                serverPort = address.port;
                serverLocation = "http://" + serverHostname + ":" + serverPort + "/";
                serverDir = config.outPath;
                logger.log('info', "DocPad listening to " + serverLocation + " on directory " + serverDir);
              } catch (err) {
                logger.log('err', "Could not start the web server, chances are the desired port " + config.port + " is already in use");
              }
            }
            return docpad.emitSync('serverAfter', {
              server: server
            }, function(err) {
              if (err) {
                return complete(err);
              }
              if (!err) {
                logger.log('debug', 'Server setup');
              }
              return complete();
            });
          });
        });
      });
      return this;
    };

    return DocPad;

  })(EventSystem);

  module.exports = {
    DocPad: DocPad,
    createInstance: function(config, next) {
      return new DocPad(config, next);
    }
  };

}).call(this);
