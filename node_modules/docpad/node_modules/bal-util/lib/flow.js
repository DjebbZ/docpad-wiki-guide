// Generated by CoffeeScript 1.3.1
(function() {
  var balUtilFlow,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  balUtilFlow = {
    toString: function(obj) {
      return Object.prototype.toString.call(obj);
    },
    isArray: function(obj) {
      return this.toString(obj) === '[object Array]';
    },
    each: function(obj, callback, context) {
      var broke, item, key, _i, _len;
      broke = false;
      context || (context = obj);
      if (this.isArray(obj)) {
        for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
          item = obj[key];
          if (callback.call(context, item, key, obj) === false) {
            broke = true;
            break;
          }
        }
      } else {
        for (key in obj) {
          if (!__hasProp.call(obj, key)) continue;
          item = obj[key];
          if (callback.call(context, item, key, obj) === false) {
            broke = true;
            break;
          }
        }
      }
      return this;
    },
    /*
    	Usage:
    
    		# Fire tasks as we go
    		tasks = new Group (err) -> next err
    		tasks.total = 2
    		someAsyncFunction arg1, arg2, tasks.completer()
    		anotherAsyncFunction arg1, arg2, (err) ->
    			tasks.complete err
    
    		# Add tasks to a queue then fire them together asynchronously
    		tasks = new Group (err) -> next err
    		tasks.push ((arg1,arg2) -> someAsyncFunction arg1, arg2, tasks.completer())(arg1,arg2)
    		tasks.push ((arg1,arg2) -> anotherAsyncFunction arg1, arg2, tasks.completer())(arg1,arg2)
    		tasks.run()
    
    		# Add tasks to a queue then fire them together synchronously
    		tasks = new Group (err) -> next err
    		tasks.push ((arg1,arg2) -> someAsyncFunction arg1, arg2, tasks.completer())(arg1,arg2)
    		tasks.push ((arg1,arg2) -> anotherAsyncFunction arg1, arg2, tasks.completer())(arg1,arg2)
    		tasks.run()
    */

    Group: (function() {

      _Class.prototype.total = 0;

      _Class.prototype.completed = 0;

      _Class.prototype.exited = false;

      _Class.prototype.queue = [];

      _Class.prototype.queueIndex = 0;

      _Class.prototype.mode = 'async';

      _Class.prototype.lastResult = null;

      _Class.prototype.results = [];

      _Class.prototype.next = function() {
        throw new Error('Groups require a completion callback');
      };

      function _Class(next, mode) {
        this.next = next;
        this.clear();
        if (mode) {
          this.mode = mode;
        }
      }

      _Class.prototype.nextTask = function() {
        var task;
        ++this.queueIndex;
        if (this.queue[this.queueIndex] != null) {
          task = this.queue[this.queueIndex];
          task(this.completer());
        }
        return this;
      };

      _Class.prototype.hasCompleted = function() {
        return this.total === this.completed;
      };

      _Class.prototype.clear = function() {
        this.queue = [];
        this.queueIndex = 0;
        this.results = [];
        return this.lastResult = null;
      };

      _Class.prototype.complete = function() {
        var args, err;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        err = args[0] || void 0;
        this.lastResult = args;
        this.results.push(args);
        if (this.exited === false) {
          if (err) {
            return this.exit(err);
          } else {
            ++this.completed;
            if (this.hasCompleted()) {
              return this.exit();
            } else if (this.mode === 'sync') {
              this.nextTask();
            }
          }
        }
        return this;
      };

      _Class.prototype.completer = function() {
        var _this = this;
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.complete.apply(_this, args);
        };
      };

      _Class.prototype.exit = function(err) {
        var lastResult, results;
        if (err == null) {
          err = false;
        }
        if (this.exited === false) {
          this.exited = true;
          lastResult = this.lastResult;
          results = this.results;
          this.clear();
          if (typeof this.next === "function") {
            this.next(err, lastResult, results);
          }
        } else {
          err = new Error('Group has already exited');
          lastResult = this.lastResult;
          results = this.results;
          this.clear();
          if (typeof this.next === "function") {
            this.next(err, lastResult, results);
          }
        }
        return this;
      };

      _Class.prototype.tasks = function(tasks) {
        var task, _i, _len;
        for (_i = 0, _len = tasks.length; _i < _len; _i++) {
          task = tasks[_i];
          this.push(task);
        }
        return this;
      };

      _Class.prototype.push = function(task) {
        ++this.total;
        this.exited = false;
        this.queue.push(task);
        return this;
      };

      _Class.prototype.pushAndRun = function(task) {
        this.push(task);
        task(this.completer());
        return this;
      };

      _Class.prototype.run = function() {
        var task, _i, _len, _ref;
        this.exited = false;
        if (this.mode === 'sync') {
          this.queueIndex = 0;
          if (this.queue[this.queueIndex] != null) {
            task = this.queue[this.queueIndex];
            try {
              task(this.completer());
            } catch (err) {
              this.complete(err);
            }
          } else {
            this.exit();
          }
        } else {
          if (!this.queue.length) {
            this.exit();
          } else {
            _ref = this.queue;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              task = _ref[_i];
              try {
                task(this.completer());
              } catch (err) {
                this.complete(err);
              }
            }
          }
        }
        return this;
      };

      _Class.prototype.async = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.mode = 'async';
        this.run.apply(this, args);
        return this;
      };

      _Class.prototype.sync = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.mode = 'sync';
        this.run.apply(this, args);
        return this;
      };

      return _Class;

    })()
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = balUtilFlow;
  } else {
    this.balUtilFlow = balUtilFlow;
  }

}).call(this);
